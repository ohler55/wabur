#!/usr/bin/env ruby
# encoding: UTF-8

while (index = ARGV.index('-I'))
  _, path = ARGV.slice!(index, 2)
  $: << path
end

require 'optparse'
require 'logger'

require 'wab'
require 'wab/impl'

# The options for this application are determined by the
# +WAB::Impl::Configuration+ class which takes an +usage+ string and an
# +options+ hash. The returned object is a +WAB::Impl::Configuration+
# object that is used by the Shell to configure itself before being started.

# Prepare the +usage+ string.
# Basically a banner text and description passed on +OptionParser+.
usage = %{
Usage: wabur [options]

A pure Ruby WAB Runner. Configuration is either by command line or a
configuration file which can be a UNIX style conf file, a JSON file, or a YAML
file. The configuration typically includes designating Controller classes for
each URL path to be handled.

}

# Prepare the +options+ hash.
# Basically a mapping of supported switches and their description that gets
# parsed by +OptionParser+.
options = {
  base: {
    val: '.',
    type: String,
    doc: 'App root directory which is $BASE.',
    short: '-b'
  },
  store: {
    dir: {
      val: File.join('$BASE', 'data'),
      type: String,
      doc: "Directory to use for data storage."
    }
  },
  path_prefix: {
    val: '/v1',
    type: String,
    doc: 'URL path prefix for relative handler routing.'
  },
  handler: {
    val: [],
    doc: 'Type and handler/controller class in the form <type>=<controller class>.',
    short: '-t',
    parse: [ :type, :handler ]
  },
  type_key: {
    val: 'kind',
    type: String,
    doc: 'Shell type_key.'
  },
  http: {
    dir: {
      val: File.join('$BASE', 'pages'),
      type: String,
      doc: 'Directory where HTTP content resides.'
    },
    port: {
      val: 6363,
      type: Integer,
      doc: 'HTTP Port to listen on.'
    },
  },
  verbosity: {
    val: 'WARN',
    type: String,
    doc: 'Log level. (ERROR, WARN, INFO, DEBUG)'
  },
}

config = WAB::Impl::Configuration.new(usage, options)

# The Configuration object can be modified before initializing the Shell. By
# setting the +config[:logger]+ the Shell will use that as the logger. The
# +config[:handler]+ array can also be modified by setting path values along
# with a Controller instance, a Controller class, or the name of a Controller
# class.
config[:logger] = Logger.new(STDOUT)

shell = WAB::Impl::Shell.new(config)

shell.start
